{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Todo","text":"<p>Utilize o menu na lateral esquerda para navegar entre as diferentes p\u00e1ginas.</p>"},{"location":"definicao/","title":"Defini\u00e7\u00e3o do trabalho","text":"<p>O objetivo deste trabalho \u00e9 que os alunos projetem, implementem e documentem uma API RESTful utilizando boas pr\u00e1ticas de Arquitetura de Software. O projeto deve ser realizado em equipes de at\u00e9 4 pessoas e contemplar aspectos como modulariza\u00e7\u00e3o, padr\u00f5es arquiteturais, testes automatizados e documenta\u00e7\u00e3o adequada.</p> <p>As equipes dever\u00e3o desenvolver uma API para um sistema de Gest\u00e3o de tarefas Colaborativas, permitindo que usu\u00e1rios criem, editem, atribuam e concluam tarefas. A API deve seguir uma arquitetura bem definida(por exemplo, Arquitetura Hexagonal, Clean Architecture ou MVC), garantindo boas pr\u00e1ticas de desacoplamento e modulariza\u00e7\u00e3o.</p>"},{"location":"definicao/#requisitos-funcionais","title":"Requisitos funcionais","text":"<p>A API deve expor os seguintes endpoints:</p> <p>Usu\u00e1rios:</p> <ul> <li>POST /users -&gt; Criar um novo usu\u00e1rio</li> <li>GET /users/{id} -&gt; Obter informa\u00e7\u00f5es de um usu\u00e1rio espec\u00edfico</li> <li>PUT /users/{id} -&gt; Atualizar informa\u00e7\u00f5es do usu\u00e1rio</li> <li>DELETE /users/{id} -&gt; Remover um usu\u00e1rio (soft delete)</li> </ul> <p>Tarefas:</p> <ul> <li>POST /tasks -&gt; Criar uma nova tarefa</li> <li>GET /tasks/{id} -&gt; Obter detalhes de uma tarefa</li> <li>GET /tasks?assignedTo={userId} -&gt; Listar todas as tarefas atribu\u00eddas a um usu\u00e1rio</li> <li>PUT /tasks/{id} -&gt; Atualizar informa\u00e7\u00f5es da tarefa (t\u00edtulo, descri\u00e7\u00e3o, status)</li> <li>DELETE /tasks/{id} -&gt; Remover uma tarefa</li> </ul> <p>Autentica\u00e7\u00e3o:</p> <ul> <li>POST /auth/login -&gt; Login de usu\u00e1rios, retornando um token JWT para autentica\u00e7\u00e3o nas demais requisi\u00e7\u00f5es</li> <li>POST /auth/logout -&gt; Logout do usu\u00e1rio</li> </ul>"},{"location":"definicao/#requisitos-complementares-ainda-pode-ser-alterado","title":"Requisitos complementares (ainda pode ser alterado)","text":"<p>Integra\u00e7\u00e3o com Calend\u00e1rios (Google Calendar, Outlook):</p> <ul> <li>Permitir que tarefas atribu\u00eddas com datas sejam sincronizadas com o calend\u00e1rio do usu\u00e1rio</li> <li>Exemplo: ao criar uma tarefa com data e hora, o sistema cria um evento no Google Calendar do usu\u00e1rio</li> </ul> <p>Webhooks para Integra\u00e7\u00e3o com Slack/Discord:</p> <ul> <li>Disparar notifica\u00e7\u00f5es sempre que uma tarefa for criada, atribu\u00edda ou conclu\u00edda</li> <li>Pode ser implementado de forma gen\u00e9rica: usu\u00e1rios configuram seus pr\u00f3prios webhooks</li> </ul>"},{"location":"definicao/#requisitos-nao-funcionais","title":"Requisitos N\u00e3o Funcionais","text":"<ul> <li>Utilizar linguagem de programa\u00e7\u00e3o \u00e0 escolha da equipe (exemplo: Python com FastAPI, Java com Spring Boot ou Node.js com Express)</li> <li>Implementar padr\u00f5es arquiteturais claros (por exemplo, Arquitetura Hexagonal, MVC ou Clean Architecture)</li> <li>Utilizar banco de dados relacional (MySQL, PostgreSQL) ou NoSQL (MongoDB), justificando a escolha</li> <li>Implementar testes automatizados com cobertura m\u00ednima de 60% do c\u00f3digo da API</li> <li>Implementar logs e tratamento de erros adequados</li> <li>Documentar a API utilizando Swagger/OpenAP</li> </ul>"},{"location":"architecture/sdd/","title":"Software Design Description (SDD)","text":""},{"location":"architecture/sdd/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este projeto busca desenvolver e projetar uma aplica\u00e7\u00e3o de gest\u00e3o de tarefas colaborativas conforme a defini\u00e7\u00e3o do trabalho seguindo uma arquitetura hexagonal. Para a autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o dos usu\u00e1rios, ser\u00e1 implementado um sistema pr\u00f3prio com o aux\u00edlio da biblioteca Spring Security.</p>"},{"location":"architecture/sdd/#system-architecture","title":"System architecture","text":"<p>Em um alto n\u00edvel, teremos um servidor que exp\u00f5e sua API para o mundo e utiliza um banco de dados para persist\u00eancia das tarefas. Por enquanto, o servidor ser\u00e1 respons\u00e1vel pela autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o dos usu\u00e1rios e tamb\u00e9m o gerenciamento das tarefas.</p> <pre><code>architecture-beta\n    group api(cloud)[API]\n\n    service db(database)[Database] in api\n    service server(server)[Server] in api\n\n    db:L -- R:server</code></pre>"}]}